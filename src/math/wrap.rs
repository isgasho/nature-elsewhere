use std::ops::{Add, Rem, Sub};

/// from is inclusive.
/// to is exclusive except when equal to from.
/// Returns a value wrapped to the domain [from, to).
pub fn wrap<T: Add<Output = T> + Sub<Output = T> + Rem<Output = T> + Copy>(
  val: T,
  from: T,
  to: T,
) -> T {
  let range = to - from; // range ∈ [0, +∞).
  let x = (val - from) % range; // Subtract min and wrap to x ∈ (-range, range).
  let y = x + range; // Translate to y ∈ (0, 2 * range).
  let z = y % range; // Wrap to z ∈ [0, range).
  z + from // Add min to return ∈ [min, max).
}

#[cfg(test)]
mod test {
  use super::*;

  // [todo] What's the best way to test a table of inputs and expected outputs?
  //        At the very least, I think a macro could be used here.

  #[test]
  fn int() {
    vec![
      // Negative to zero range.
      (-5, -1, 0, -1),
      (-4, -1, 0, -1),
      (-3, -1, 0, -1),
      (-2, -1, 0, -1),
      (-1, -1, 0, -1),
      (0, -1, 0, -1),
      (1, -1, 0, -1),
      (2, -1, 0, -1),
      (3, -1, 0, -1),
      (4, -1, 0, -1),
      (5, -1, 0, -1),
      // Zero to positive range.
      (-5, 0, 1, 0),
      (-4, 0, 1, 0),
      (-3, 0, 1, 0),
      (-2, 0, 1, 0),
      (-1, 0, 1, 0),
      (0, 0, 1, 0),
      (1, 0, 1, 0),
      (2, 0, 1, 0),
      (3, 0, 1, 0),
      (4, 0, 1, 0),
      (5, 0, 1, 0),
      // Negative to positive range.
      (-5, -1, 1, -1),
      (-4, -1, 1, 0),
      (-3, -1, 1, -1),
      (-2, -1, 1, 0),
      (-1, -1, 1, -1),
      (0, -1, 1, 0),
      (1, -1, 1, -1),
      (2, -1, 1, 0),
      (3, -1, 1, -1),
      (4, -1, 1, 0),
      (5, -1, 1, -1),
      // Lesser negative range.
      (-7, -6, -4, -5),
      (-6, -6, -4, -6),
      (-5, -6, -4, -5),
      (-4, -6, -4, -6),
      (-3, -6, -4, -5),
      (-2, -6, -4, -6),
      (-1, -6, -4, -5),
      (0, -6, -4, -6),
      (1, -6, -4, -5),
      (2, -6, -4, -6),
      (3, -6, -4, -5),
      (4, -6, -4, -6),
      (5, -6, -4, -5),
      (6, -6, -4, -6),
      (7, -6, -4, -5),
      // Negative range.
      (-10, -3, -1, -2),
      (-9, -3, -1, -3),
      (-8, -3, -1, -2),
      (-7, -3, -1, -3),
      (-6, -3, -1, -2),
      (-5, -3, -1, -3),
      (-4, -3, -1, -2),
      (-3, -3, -1, -3),
      (-2, -3, -1, -2),
      (-1, -3, -1, -3),
      (0, -3, -1, -2),
      (1, -3, -1, -3),
      (2, -3, -1, -2),
      (3, -3, -1, -3),
      (4, -3, -1, -2),
      (5, -3, -1, -3),
      // Positive range.
      (-5, 1, 3, 1),
      (-4, 1, 3, 2),
      (-3, 1, 3, 1),
      (-2, 1, 3, 2),
      (-1, 1, 3, 1),
      (0, 1, 3, 2),
      (1, 1, 3, 1),
      (2, 1, 3, 2),
      (3, 1, 3, 1),
      (4, 1, 3, 2),
      (5, 1, 3, 1),
      // Greater positive range.
      (-7, 4, 6, 5),
      (-6, 4, 6, 4),
      (-5, 4, 6, 5),
      (-4, 4, 6, 4),
      (-3, 4, 6, 5),
      (-2, 4, 6, 4),
      (-1, 4, 6, 5),
      (0, 4, 6, 4),
      (1, 4, 6, 5),
      (2, 4, 6, 4),
      (3, 4, 6, 5),
      (4, 4, 6, 4),
      (5, 4, 6, 5),
      (6, 4, 6, 4),
      (7, 4, 6, 5),
      // Even greater positive range.
      (88, 90, 95, 93),
      (89, 90, 95, 94),
      (90, 90, 95, 90),
      (91, 90, 95, 91),
      (92, 90, 95, 92),
      (93, 90, 95, 93),
      (94, 90, 95, 94),
      (95, 90, 95, 90),
      (96, 90, 95, 91),
      (97, 90, 95, 92),
      (98, 90, 95, 93),
      (99, 90, 95, 94),
      // Negative to positive range with many inputs.
      (-20, -3, 3, -2),
      (-19, -3, 3, -1),
      (-18, -3, 3, 0),
      (-17, -3, 3, 1),
      (-16, -3, 3, 2),
      (-15, -3, 3, -3),
      (-14, -3, 3, -2),
      (-13, -3, 3, -1),
      (-12, -3, 3, 0),
      (-11, -3, 3, 1),
      (-10, -3, 3, 2),
      (-9, -3, 3, -3),
      (-8, -3, 3, -2),
      (-7, -3, 3, -1),
      (-6, -3, 3, 0),
      (-5, -3, 3, 1),
      (-4, -3, 3, 2),
      (-3, -3, 3, -3),
      (-2, -3, 3, -2),
      (-1, -3, 3, -1),
      (0, -3, 3, 0),
      (1, -3, 3, 1),
      (2, -3, 3, 2),
      (3, -3, 3, -3),
      (4, -3, 3, -2),
      (5, -3, 3, -1),
      (6, -3, 3, 0),
      (7, -3, 3, 1),
      (8, -3, 3, 2),
      (9, -3, 3, -3),
      (10, -3, 3, -2),
      (11, -3, 3, -1),
      (12, -3, 3, 0),
      (13, -3, 3, 1),
      (14, -3, 3, 2),
      (15, -3, 3, -3),
      (16, -3, 3, -2),
      (17, -3, 3, -1),
      (18, -3, 3, 0),
      (19, -3, 3, 1),
      (20, -3, 3, 2),
    ]
    .into_iter()
    .enumerate()
    .for_each(|(i, (val, min, max, expected))| {
      assert_eq!(wrap(val, min, max), expected, "Case {} failed.", i);
    });
  }

  #[test]
  fn float() {
    vec![
      // Negative to zero range.
      (-5., -1., 0., -1.),
      (-4.5, -1., 0., -0.5),
      (-5., -1., 0., -1.),
      (-4.5, -1., 0., -0.5),
      (-3.5, -1., 0., -0.5),
      (-2.5, -1., 0., -0.5),
      (-1.5, -1., 0., -0.5),
      (-0.5, -1., 0., -0.5),
      (0., -1., 0., -1.),
      (0.5, -1., 0., -0.5),
      (1.5, -1., 0., -0.5),
      (2.5, -1., 0., -0.5),
      (3.5, -1., 0., -0.5),
      (4.5, -1., 0., -0.5),
      (5., -1., 0., -1.),
      // Zero to positive range.
      (-5., 0., 1., 0.),
      (-4.5, 0., 1., 0.5),
      (-3.5, 0., 1., 0.5),
      (-2.5, 0., 1., 0.5),
      (-1.5, 0., 1., 0.5),
      (-0.5, 0., 1., 0.5),
      (0., 0., 1., 0.),
      (0.5, 0., 1., 0.5),
      (1.5, 0., 1., 0.5),
      (2.5, 0., 1., 0.5),
      (3.5, 0., 1., 0.5),
      (4.5, 0., 1., 0.5),
      (5., 0., 1., 0.),
      // Negative to positive range.
      (-5., 0., 1., 0.),
      (-4.5, -1., 1., -0.5),
      (-3.5, -1., 1., 0.5),
      (-2.5, -1., 1., -0.5),
      (-1.5, -1., 1., 0.5),
      (-0.5, -1., 1., -0.5),
      (0., 0., 1., 0.),
      (0.5, -1., 1., 0.5),
      (1.5, -1., 1., -0.5),
      (2.5, -1., 1., 0.5),
      (3.5, -1., 1., -0.5),
      (4.5, -1., 1., 0.5),
      (5., -1., 1., -1.),
      // Lesser negative range.
      (-7., -6., -4., -5.),
      (-6.5, -6., -4., -4.5),
      (-5.5, -6., -4., -5.5),
      (-4.5, -6., -4., -4.5),
      (-3.5, -6., -4., -5.5),
      (-2.5, -6., -4., -4.5),
      (-1.5, -6., -4., -5.5),
      (-0.5, -6., -4., -4.5),
      (0., -6., -4., -6.),
      (0.5, -6., -4., -5.5),
      (1.5, -6., -4., -4.5),
      (2.5, -6., -4., -5.5),
      (3.5, -6., -4., -4.5),
      (4.5, -6., -4., -5.5),
      (5.5, -6., -4., -4.5),
      (6.5, -6., -4., -5.5),
      (7., -6., -4., -5.),
      // Negative range.
      (-10., -3., -1., -2.),
      (-9.5, -3., -1., -1.5),
      (-8.5, -3., -1., -2.5),
      (-7.5, -3., -1., -1.5),
      (-6.5, -3., -1., -2.5),
      (-5.5, -3., -1., -1.5),
      (-4.5, -3., -1., -2.5),
      (-3.5, -3., -1., -1.5),
      (-2.5, -3., -1., -2.5),
      (-1.5, -3., -1., -1.5),
      (-0.5, -3., -1., -2.5),
      (0., -3., -1., -2.),
      (0.5, -3., -1., -1.5),
      (1.5, -3., -1., -2.5),
      (2.5, -3., -1., -1.5),
      (3.5, -3., -1., -2.5),
      (4.5, -3., -1., -1.5),
      (5., -3., -1., -3.),
      // Positive range.
      (-5., 1., 3., 1.),
      (-4.5, 1., 3., 1.5),
      (-3.5, 1., 3., 2.5),
      (-2.5, 1., 3., 1.5),
      (-1.5, 1., 3., 2.5),
      (-0.5, 1., 3., 1.5),
      (0., 1., 3., 2.),
      (0.5, 1., 3., 2.5),
      (1.5, 1., 3., 1.5),
      (2.5, 1., 3., 2.5),
      (3.5, 1., 3., 1.5),
      (4.5, 1., 3., 2.5),
      (5., 1., 3., 1.),
      // Greater positive range.
      (-7., 4., 6., 5.),
      (-6.5, 4., 6., 5.5),
      (-5.5, 4., 6., 4.5),
      (-4.5, 4., 6., 5.5),
      (-3.5, 4., 6., 4.5),
      (-2.5, 4., 6., 5.5),
      (-1.5, 4., 6., 4.5),
      (-0.5, 4., 6., 5.5),
      (0., 4., 6., 4.),
      (0.5, 4., 6., 4.5),
      (1.5, 4., 6., 5.5),
      (2.5, 4., 6., 4.5),
      (3.5, 4., 6., 5.5),
      (4.5, 4., 6., 4.5),
      (5.5, 4., 6., 5.5),
      (6.5, 4., 6., 4.5),
      (7., 4., 6., 5.),
      // Even greater positive range.
      (88., 90., 95., 93.),
      (88.5, 90., 95., 93.5),
      (89.5, 90., 95., 94.5),
      (90.5, 90., 95., 90.5),
      (91.5, 90., 95., 91.5),
      (92.5, 90., 95., 92.5),
      (93.5, 90., 95., 93.5),
      (94.5, 90., 95., 94.5),
      (95.5, 90., 95., 90.5),
      (96.5, 90., 95., 91.5),
      (97.5, 90., 95., 92.5),
      (98.5, 90., 95., 93.5),
      (99., 90., 95., 94.),
      // Negative to positive range with many inputs.
      (-20., -3., 3., -2.),
      (-19.5, -3., 3., -1.5),
      (-18.5, -3., 3., -0.5),
      (-17.5, -3., 3., 0.5),
      (-16.5, -3., 3., 1.5),
      (-15.5, -3., 3., 2.5),
      (-14.5, -3., 3., -2.5),
      (-13.5, -3., 3., -1.5),
      (-12.5, -3., 3., -0.5),
      (-11.5, -3., 3., 0.5),
      (-10.5, -3., 3., 1.5),
      (-9.5, -3., 3., 2.5),
      (-8.5, -3., 3., -2.5),
      (-7.5, -3., 3., -1.5),
      (-6.5, -3., 3., -0.5),
      (-5.5, -3., 3., 0.5),
      (-4.5, -3., 3., 1.5),
      (-3.5, -3., 3., 2.5),
      (-2.5, -3., 3., -2.5),
      (-1.5, -3., 3., -1.5),
      (-0.5, -3., 3., -0.5),
      (0., -3., 3., 0.),
      (0.5, -3., 3., 0.5),
      (1.5, -3., 3., 1.5),
      (2.5, -3., 3., 2.5),
      (3.5, -3., 3., -2.5),
      (4.5, -3., 3., -1.5),
      (5.5, -3., 3., -0.5),
      (6.5, -3., 3., 0.5),
      (7.5, -3., 3., 1.5),
      (8.5, -3., 3., 2.5),
      (9.5, -3., 3., -2.5),
      (10.5, -3., 3., -1.5),
      (11.5, -3., 3., -0.5),
      (12.5, -3., 3., 0.5),
      (13.5, -3., 3., 1.5),
      (14.5, -3., 3., 2.5),
      (15.5, -3., 3., -2.5),
      (16.5, -3., 3., -1.5),
      (17.5, -3., 3., -0.5),
      (18.5, -3., 3., 0.5),
      (19.5, -3., 3., 1.5),
      (20., -3., 3., 2.),
    ]
    .into_iter()
    .enumerate()
    .for_each(|(i, (val, min, max, expected))| {
      assert_eq!(wrap(val, min, max), expected, "Case {} failed.", i);
    });
  }
}
