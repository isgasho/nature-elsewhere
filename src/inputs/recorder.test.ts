import {InputBit} from './input-bit'
import {ObjectUtil} from '../utils/object-util'
import {Recorder} from './recorder'

const LEFT = InputBit.LEFT
const RIGHT = InputBit.RIGHT
const UP = InputBit.UP
const DOWN = InputBit.DOWN

const inputs: ReadonlyArray<InputBit> = ObjectUtil.freeze(
  ObjectUtil.values(InputBit).filter(val => typeof val === 'number')
)
type InputMethod = Exclude<
  keyof Recorder,
  'write' | 'set' | 'read' | 'combo' | 'active'
>
type BitMethod = Readonly<{bit: InputBit; method: InputMethod}>

const bitMethods: ReadonlyArray<BitMethod> = ObjectUtil.freeze(<BitMethod[]>[
  {bit: LEFT, method: 'left'},
  {bit: RIGHT, method: 'right'},
  {bit: UP, method: 'up'},
  {bit: DOWN, method: 'down'},
  {bit: InputBit.MENU, method: 'menu'},
  {bit: InputBit.DEBUG_CONTEXT_LOSS, method: 'debugContextLoss'}
])

describe('InputBit', () => {
  test.each(inputs)('%# InputBit %p is unique', input =>
    expect(inputs.filter(val => input === val)).toHaveLength(1)
  )

  test.each(inputs)('%# InputBit %p is a nonzero power of two', input =>
    expect(Math.log2(input) % 1).toStrictEqual(0)
  )
})

describe('State', () => {
  test.each(bitMethods)('%# no input %p', ({method}) => {
    const subject = new Recorder()
    subject.read(1)
    expect(subject[method]()).toStrictEqual(false)
    expect(subject[method](true)).toStrictEqual(false)
    expect(subject.combo()).toStrictEqual(true)
    expect(subject.combo(true)).toStrictEqual(false)
  })

  test.each(bitMethods)('%# tapped input %p', ({bit, method}) => {
    const subject = new Recorder()
    subject.set(bit, true)
    subject.read(1)
    expect(subject[method]()).toStrictEqual(true)
    expect(subject[method](true)).toStrictEqual(true)
    expect(subject.combo(false, bit)).toStrictEqual(true)
    expect(subject.combo(true, bit)).toStrictEqual(true)
  })

  test.each(bitMethods)('%# old tapped input %p', ({bit, method}) => {
    const subject = new Recorder()
    subject.set(bit, true)
    subject.read(1000)
    expect(subject[method]()).toStrictEqual(true)
    expect(subject[method](true)).toStrictEqual(true)
    expect(subject.combo(false, bit)).toStrictEqual(true)
    expect(subject.combo(true, bit)).toStrictEqual(true)
  })

  test.each(bitMethods)('%# held input %p', ({bit, method}) => {
    const subject = new Recorder()
    subject.set(bit, true)
    subject.read(1)
    subject.write()
    subject.read(1)
    expect(subject[method]()).toStrictEqual(true)
    expect(subject[method](true)).toStrictEqual(false)
    expect(subject.combo(false, bit)).toStrictEqual(true)
    expect(subject.combo(true, bit)).toStrictEqual(false)
  })

  test.each(bitMethods)('%# long held input %p', ({bit, method}) => {
    const subject = new Recorder()
    subject.set(bit, true)
    subject.read(1)
    subject.write()
    subject.read(1000)
    expect(subject[method]()).toStrictEqual(true)
    expect(subject[method](true)).toStrictEqual(false)
    expect(subject.combo(false, bit)).toStrictEqual(true)
    expect(subject.combo(true, bit)).toStrictEqual(false)
  })

  test.each(bitMethods)('%# tapped and released input %p', ({bit, method}) => {
    const subject = new Recorder()
    subject.set(bit, true)
    subject.read(1)
    subject.write()
    subject.set(bit, false)
    subject.read(1)
    expect(subject[method]()).toStrictEqual(false)
    expect(subject[method](true)).toStrictEqual(false)
    expect(subject.combo(false, bit)).toStrictEqual(true)
    expect(subject.combo(true, bit)).toStrictEqual(false)
  })

  test.each(bitMethods)('%# toggled 3x input %p', ({bit, method}) => {
    const subject = new Recorder()
    subject.set(bit, true)
    subject.read(1)
    subject.write()
    subject.set(bit, false)
    subject.read(1)
    subject.write()
    subject.set(bit, true)
    subject.read(1)
    expect(subject[method]()).toStrictEqual(true)
    expect(subject[method](true)).toStrictEqual(true)
    expect(subject.combo(false, bit, bit)).toStrictEqual(true)
    expect(subject.combo(true, bit, bit)).toStrictEqual(true)
  })

  test('Changed input without release', () => {
    const subject = new Recorder()
    subject.set(UP, true)
    subject.read(1)
    subject.write()
    subject.set(DOWN, true)
    subject.read(1)

    expect(subject.up()).toStrictEqual(true)
    expect(subject.up(true)).toStrictEqual(false)
    expect(subject.down()).toStrictEqual(true)
    expect(subject.down(true)).toStrictEqual(true)

    expect(subject.combo(false, UP)).toStrictEqual(false)
    expect(subject.combo(true, UP)).toStrictEqual(false)
    expect(subject.combo(false, DOWN)).toStrictEqual(false)
    expect(subject.combo(true, DOWN)).toStrictEqual(false)
    expect(subject.combo(false, UP | DOWN)).toStrictEqual(true)
    expect(subject.combo(true, UP | DOWN)).toStrictEqual(true)
    expect(subject.combo(false, UP, UP | DOWN)).toStrictEqual(true)
    expect(subject.combo(true, UP, UP | DOWN)).toStrictEqual(true)
  })

  test.each(bitMethods)('%# missed input release %p', ({bit, method}) => {
    const subject = new Recorder()
    subject.set(bit, true)
    subject.read(1)
    subject.write()
    subject.set(bit, true)
    subject.read(1)
    expect(subject[method]()).toStrictEqual(true)
    expect(subject[method](true)).toStrictEqual(false)
    expect(subject.combo(false, bit)).toStrictEqual(true)
    expect(subject.combo(true, bit)).toStrictEqual(false)
  })

  test.each(bitMethods)('%# missed input tapped %p', ({bit, method}) => {
    const subject = new Recorder()
    subject.set(bit, true)
    subject.read(1)
    subject.write()
    subject.set(bit, false)
    subject.read(1)
    subject.write()
    subject.set(bit, false)
    subject.read(1)
    expect(subject[method]()).toStrictEqual(false)
    expect(subject[method](true)).toStrictEqual(false)
    expect(subject.combo(false, bit)).toStrictEqual(true)
    expect(subject.combo(true, bit)).toStrictEqual(false)
  })

  test('1x combo', () => {
    const subject = new Recorder()
    subject.set(UP, true)
    subject.read(1)
    expect(subject.up()).toStrictEqual(true)
    expect(subject.up(true)).toStrictEqual(true)
    expect(subject.combo(false, UP)).toStrictEqual(true)
    expect(subject.combo(true, UP)).toStrictEqual(true)
  })

  test('2x combo', () => {
    const subject = new Recorder()
    subject.set(UP, true)
    subject.read(1)
    subject.write()
    subject.set(UP, false)
    subject.read(1)
    subject.write()
    subject.set(UP, true)
    subject.read(1)
    expect(subject.up()).toStrictEqual(true)
    expect(subject.up(true)).toStrictEqual(true)
    expect(subject.combo(false, UP, UP)).toStrictEqual(true)
    expect(subject.combo(true, UP, UP)).toStrictEqual(true)
  })

  test('Long combo', () => {
    const subject = new Recorder()
    subject.set(UP, true)
    subject.read(100)
    subject.write()
    subject.set(UP, false)
    subject.read(100)
    subject.write()
    subject.set(UP, true)
    subject.read(100)
    subject.write()
    subject.set(UP, false)
    subject.read(100)
    subject.write()
    subject.set(DOWN, true)
    subject.read(100)
    subject.write()
    subject.set(DOWN, false)
    subject.read(100)
    subject.write()
    subject.set(DOWN, true)
    subject.read(100)
    subject.write()
    subject.set(DOWN, false)
    subject.read(100)
    subject.write()
    subject.set(LEFT, true)
    subject.read(100)
    subject.write()
    subject.set(LEFT, false)
    subject.read(100)
    subject.write()
    subject.set(RIGHT, true)
    subject.read(100)
    subject.write()
    subject.set(RIGHT, false)
    subject.read(100)
    subject.write()
    subject.set(LEFT, true)
    subject.read(100)
    subject.write()
    subject.set(LEFT, false)
    subject.read(100)
    subject.write()
    subject.set(RIGHT, true)
    subject.read(100)

    expect(subject.up()).toStrictEqual(false)
    expect(subject.up(true)).toStrictEqual(false)
    expect(subject.down()).toStrictEqual(false)
    expect(subject.down(true)).toStrictEqual(false)
    expect(subject.left()).toStrictEqual(false)
    expect(subject.left(true)).toStrictEqual(false)
    expect(subject.right()).toStrictEqual(true)
    expect(subject.right(true)).toStrictEqual(true)

    const combo = [UP, UP, DOWN, DOWN, LEFT, RIGHT, LEFT, RIGHT]
    expect(subject.combo(false, ...combo)).toStrictEqual(true)
    expect(subject.combo(true, ...combo)).toStrictEqual(true)
  })

  test('After combo', () => {
    const subject = new Recorder()
    subject.set(UP, true)
    subject.read(1)
    subject.write()
    subject.set(UP, false)
    subject.read(1)
    subject.write()
    subject.set(UP, true)
    subject.read(1)
    subject.write()
    subject.set(UP, false)
    subject.read(1)
    expect(subject.up()).toStrictEqual(false)
    expect(subject.up(true)).toStrictEqual(false)
    expect(subject.combo(false, UP, UP)).toStrictEqual(true)
    expect(subject.combo(true, UP, UP)).toStrictEqual(false)
  })

  test('Around the world combo', () => {
    const subject = new Recorder()
    subject.set(UP, true)
    subject.read(1)
    subject.write()
    subject.set(LEFT, true)
    subject.read(1)
    subject.write()
    subject.set(UP, false)
    subject.read(1)
    subject.write()
    subject.set(DOWN, true)
    subject.read(1)
    subject.write()
    subject.set(LEFT, false)
    subject.read(1)
    subject.write()
    subject.set(RIGHT, true)
    subject.read(1)
    subject.write()
    subject.set(DOWN, false)
    subject.read(1)

    expect(subject.up()).toStrictEqual(false)
    expect(subject.up(true)).toStrictEqual(false)
    expect(subject.left()).toStrictEqual(false)
    expect(subject.left(true)).toStrictEqual(false)
    expect(subject.down()).toStrictEqual(false)
    expect(subject.down(true)).toStrictEqual(false)
    expect(subject.right()).toStrictEqual(true)
    expect(subject.right(true)).toStrictEqual(false)

    const combo = [UP, UP | LEFT, LEFT, LEFT | DOWN, DOWN, DOWN | RIGHT, RIGHT]
    expect(subject.combo(false, ...combo)).toStrictEqual(true)
    expect(subject.combo(true, ...combo)).toStrictEqual(true)
  })

  test('Combo missed', () => {
    const subject = new Recorder()
    subject.set(UP, true)
    subject.read(1)
    subject.write()
    subject.set(UP, false)
    subject.read(1000)
    subject.write()
    subject.set(UP, true)
    subject.read(1)
    expect(subject.up()).toStrictEqual(true)
    expect(subject.up(true)).toStrictEqual(true)
    expect(subject.combo(false, UP, UP)).toStrictEqual(false)
    expect(subject.combo(true, UP, UP)).toStrictEqual(false)
  })

  test('Combo subset', () => {
    const subject = new Recorder()
    subject.set(DOWN, true)
    subject.read(1)
    subject.write()
    subject.set(DOWN, false)
    subject.read(1)
    subject.write()
    subject.set(UP, true)
    subject.read(1)
    subject.write()
    subject.set(UP, false)
    subject.read(1)
    subject.write()
    subject.set(UP, true)
    subject.read(1)
    expect(subject.up()).toStrictEqual(true)
    expect(subject.up(true)).toStrictEqual(true)
    expect(subject.combo(false, DOWN, UP, UP)).toStrictEqual(true)
    expect(subject.combo(true, DOWN, UP, UP)).toStrictEqual(true)
    expect(subject.combo(false, UP, UP)).toStrictEqual(true)
    expect(subject.combo(true, UP, UP)).toStrictEqual(true)
    expect(subject.combo(false, UP)).toStrictEqual(true)
    expect(subject.combo(true, UP)).toStrictEqual(true)
  })

  test('Held combo', () => {
    const subject = new Recorder()
    subject.set(DOWN, true)
    subject.read(1)
    subject.write()
    subject.set(DOWN, false)
    subject.read(1)
    subject.write()
    subject.set(UP, true)
    subject.read(1000)
    expect(subject.up()).toStrictEqual(true)
    expect(subject.up(true)).toStrictEqual(true)
    expect(subject.combo(false, DOWN, UP)).toStrictEqual(true)
    expect(subject.combo(true, DOWN, UP)).toStrictEqual(true)
  })

  test('After held combo', () => {
    const subject = new Recorder()
    subject.set(DOWN, true)
    subject.read(1)
    subject.write()
    subject.set(DOWN, false)
    subject.read(1)
    subject.write()
    subject.set(UP, true)
    subject.read(1000)
    subject.write()
    subject.read(1)
    expect(subject.up()).toStrictEqual(true)
    expect(subject.up(true)).toStrictEqual(false)
    expect(subject.combo(false, DOWN, UP)).toStrictEqual(true)
    expect(subject.combo(true, DOWN, UP)).toStrictEqual(false)
  })

  test('Long after held combo', () => {
    const subject = new Recorder()
    subject.set(DOWN, true)
    subject.read(1)
    subject.write()
    subject.set(DOWN, false)
    subject.read(1)
    subject.write()
    subject.set(UP, true)
    subject.read(1000)
    subject.write()
    subject.read(1000)
    expect(subject.up()).toStrictEqual(true)
    expect(subject.up(true)).toStrictEqual(false)
    expect(subject.combo(false, DOWN, UP)).toStrictEqual(true)
    expect(subject.combo(true, DOWN, UP)).toStrictEqual(false)
  })

  test('Simultaneous input combo', () => {
    const subject = new Recorder()
    subject.set(UP | DOWN, true)
    subject.read(1)
    subject.write()
    subject.set(UP | DOWN, false)
    subject.read(1)
    subject.write()
    subject.set(UP | DOWN, true)
    subject.read(1)
    subject.write()
    subject.set(DOWN, false)
    subject.read(1)
    expect(subject.up()).toStrictEqual(true)
    expect(subject.up(true)).toStrictEqual(false)
    expect(subject.down()).toStrictEqual(false)
    expect(subject.down(true)).toStrictEqual(false)
    expect(subject.combo(false, UP | DOWN, UP | DOWN, UP)).toStrictEqual(true)
    expect(subject.combo(true, UP | DOWN, UP | DOWN, UP)).toStrictEqual(true)
  })

  test('Any mapping sets input', () => {
    const subject = new Recorder()
    subject.set(UP, true)
    subject.set(UP, false)
    subject.read(1)
    expect(subject.up()).toStrictEqual(true)
    expect(subject.up(true)).toStrictEqual(true)
    expect(subject.combo(false, UP)).toStrictEqual(true)
    expect(subject.combo(true, UP)).toStrictEqual(true)
  })

  test('Any mapping sets input in any order', () => {
    const subject = new Recorder()
    subject.set(UP, false)
    subject.set(UP, true)
    subject.read(1)
    expect(subject.up()).toStrictEqual(true)
    expect(subject.up(true)).toStrictEqual(true)
    expect(subject.combo(false, UP)).toStrictEqual(true)
    expect(subject.combo(true, UP)).toStrictEqual(true)
  })

  test('Any mapping sets input and clears', () => {
    const subject = new Recorder()
    subject.set(UP, true)
    subject.set(UP, false)
    subject.read(1)
    subject.write()
    subject.set(UP, false)
    subject.read(1)
    expect(subject.up()).toStrictEqual(false)
    expect(subject.up(true)).toStrictEqual(false)
    expect(subject.combo(false, UP)).toStrictEqual(true)
    expect(subject.combo(true, UP)).toStrictEqual(false)
  })
})
